[{"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/App.tsx":"1","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/index.tsx":"2","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/reportWebVitals.ts":"3","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/ColorPalette.tsx":"4","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/Color.tsx":"5","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/SerpAPI.tsx":"6","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/CompareColors.tsx":"7","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/ColorMatchedSearchResult.tsx":"8","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/SearchBar.tsx":"9","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/SerpWowAPI.tsx":"10","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/UploadModal.tsx":"11","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/ProgressBar.tsx":"12","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/UploadStatusBar.tsx":"13"},{"size":6735,"mtime":1612812040514,"results":"14","hashOfConfig":"15"},{"size":547,"mtime":1612810854335,"results":"16","hashOfConfig":"15"},{"size":425,"mtime":1612297760647,"results":"17","hashOfConfig":"15"},{"size":482,"mtime":1612574870683,"results":"18","hashOfConfig":"15"},{"size":909,"mtime":1612574870682,"results":"19","hashOfConfig":"15"},{"size":2809,"mtime":1612551810222,"results":"20","hashOfConfig":"15"},{"size":1506,"mtime":1612574870681,"results":"21","hashOfConfig":"15"},{"size":426,"mtime":1612574870683,"results":"22","hashOfConfig":"15"},{"size":1117,"mtime":1612506730605,"results":"23","hashOfConfig":"15"},{"size":1570,"mtime":1612683503000,"results":"24","hashOfConfig":"15"},{"size":2493,"mtime":1612846669497,"results":"25","hashOfConfig":"15"},{"size":747,"mtime":1612843863595,"results":"26","hashOfConfig":"15"},{"size":1853,"mtime":1612845092025,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},"16rde79",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"31"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"31"},"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/App.tsx",["60","61","62"],"import React, { useState, useEffect, useRef } from 'react';\n// import axios from 'axios';\nimport './App.css';\nimport UploadModal from './components/UploadModal'\n// import { fetchColorProperties } from './VisionAPI'\n// import { extractColors } from './ExtractColor'\n\nimport ColorPalette from './components/ColorPalette';\nimport { ColorProps } from './components/Color'\n// import { fetchSearchResults } from './SerpAPI'\nimport SearchBar from './components/SearchBar'\nimport { SearchParams } from './components/SearchBar'\nimport ColorMatchedSearchResult from './components/ColorMatchedSearchResult';\nimport { SearchResultProps } from './components/ColorMatchedSearchResult'\nimport { deltaE } from './CompareColors'\nimport { fetchSerpWowSearchResults } from './SerpWowAPI'\n\n// import { prominent } from 'color.js'\nimport splashy  from 'splashy'\nimport convert from 'color-convert'\n\n\n\nconst App: React.FC = () => {\n  // const [loading, setLoading] = useState(false)\n  const [errorMessage, setErrorMessage] = useState< string | null | void >(null)\n  const [selectedColors, setSelectedColors] = useState<ColorProps[]>([])\n  const [colorResults, setColorResults] = useState<ColorProps[]>([])\n\n  const [searchResults, setSearchResults] = useState<SearchResultProps[]>([])\n\n  const [colorMatchedResults, setColorMatchedResults] = useState<SearchResultProps[]>([])\n\n  const [uploadModalShow, setUploadModalShow] = React.useState(false);\n\n  // Select/Deselect color from color palette\n  const onClickColor = (clickedColor: ColorProps) => {\n    let newSelectedColors: ColorProps[] = []\n\n    if(clickedColor.selected){\n      newSelectedColors = [...selectedColors]\n      newSelectedColors.push(clickedColor)\n    } else {\n      selectedColors.forEach( pastSelectedColor => {\n        if(clickedColor.id !== pastSelectedColor.id){\n          newSelectedColors.push(pastSelectedColor)\n        }\n      })\n    }\n\n    setSelectedColors(newSelectedColors)\n  }\n\n\n  // After uploading image, call API to determine dominant colors in image\n  const onImageSubmit = (imgUrl: string) => {    \n    setColorResults([])\n    setSelectedColors([])\n    setColorMatchedResults([])\n\n    //  extractColors(imgUrl, 1)\n      // .then(response => {\n    // prominent(imgUrl, { amount: 5, group: 40,  sample: 5 })\n    splashy(imgUrl)\n      .then( response => {\n        // if response is an array of color objects, set colors\n        // let i = 1\n        // // if amount is 1\n        //   const colorObject: ColorProps[] = [{\n        //     color: response,\n        //     id: i\n        //   }]\n        \n          // setColorResults(colorObject)\n          // setSelectedColors(colorObject)\n        // // if amount is > 1\n\n        const colorArray = response.map( color => {\n          return convert.hex.rgb(color)\n        })\n\n        // let colorArray = response as Array<number[]>\n        if(colorArray.length > 0) {\n          const colorObjects: ColorProps[] = []\n          let i = 1\n\n          for( let color of colorArray ){\n            colorObjects.push({\n              color: color,\n              id: i\n            })\n\n            i += 1\n          }\n\n          setColorResults(colorObjects)\n          setSelectedColors(colorObjects)\n        } else {\n          setErrorMessage(\"Could not read image\")\n\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 6000)\n        }\n      })\n  }\n\n  \n  const onSearchSubmit = (searchParams: SearchParams) => {\n    if(selectedColors.length === 0){\n      setErrorMessage('Select colors to search')\n    } else {\n      fetchSerpWowSearchResults(searchParams)\n        .then( response => {\n          // if response is an error string, set error message\n          if(typeof response === 'string'){\n            setErrorMessage(response)\n\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 6000)\n\n          // if response is an array of search results, set searchResults\n          } else if( typeof response === 'object') {\n            setSearchResults(response)\n          }\n        })\n    }\n  }\n\n\n  const initialRender = useRef(true)\n\n  useEffect(() => {\n    if (initialRender.current) {\n      initialRender.current = false\n\n    } else {\n\n      if(searchResults.length > 0  && selectedColors.length > 0 ) {\n        const filterSearchByColor = async (selectedColors: ColorProps[], searchResults: SearchResultProps[]) => {\n          const colorMatches: SearchResultProps[] = []\n        \n          console.log('IN FILTER SEARCH BY COLOR')\n          \n          for( const searchResult of searchResults) {\n\n            // await prominent(searchResult.imageUrl, { amount: 3, group: 30, sample: 1 })\n            await splashy(searchResult.imageUrl)\n              .then( response => {\n\n                const colorArraySearchResults = response.map( color => {\n                  return convert.hex.rgb(color)\n                })\n    \n                // response is a nested array of rgb values [[r,g,b],...]\n                // let colorArraySearchResults = response as Array<number[]>\n                \n                if( typeof colorArraySearchResults === 'object') {\n                  colorComparisonLoop:\n                  for(let searchResultRGB of colorArraySearchResults) {\n                    for(let selectColor of selectedColors) {\n                      const colorDiff = deltaE(searchResultRGB, selectColor.color)\n              \n                      if(colorDiff < 30){\n                        console.log('color match!')\n                        console.log('search result that matched', searchResult)\n                        colorMatches.push(searchResult)\n                        break colorComparisonLoop\n                      }\n                    }\n                  }\n                }\n              })\n          }\n          setColorMatchedResults(colorMatches)\n        }\n    \n        filterSearchByColor(selectedColors, searchResults)\n    \n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchResults])\n\n\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n      </header>\n\n    <main>\n    { errorMessage ? <div>{errorMessage}</div> : null }\n\n      <button onClick={() => setUploadModalShow(true)}>\n          Upload\n      </button>\n\n      <UploadModal show={uploadModalShow} onHide={() => setUploadModalShow(false)} onImageSubmit={onImageSubmit} />\n      {/* <ColorPalette colors={colorResults} onClickColorCallback={onClickColor} /> */}\n      <SearchBar onSearchSubmitCallback={onSearchSubmit}/>\n\n      { (colorMatchedResults as SearchResultProps[]).map( ( (item, i) => (\n        <ColorMatchedSearchResult key={i} title={item.title} imageUrl={item.imageUrl}/>\n      )))}\n\n\n\n    </main>\n\n\n    </div>\n  );\n}\n\nexport default App;\n",["63","64"],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/index.tsx",[],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/reportWebVitals.ts",[],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/ColorPalette.tsx",[],["65","66"],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/Color.tsx",[],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/SerpAPI.tsx",[],["67","68"],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/CompareColors.tsx",[],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/ColorMatchedSearchResult.tsx",[],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/SearchBar.tsx",[],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/SerpWowAPI.tsx",[],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/UploadModal.tsx",["69","70"],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/ProgressBar.tsx",["71","72"],"import React, { useState, useEffect } from \"react\";\nimport styled from 'styled-components'\n\ninterface ProgressBarProps {\n  value: number\n}\n\nconst ProgressBar: React.FC<ProgressBarProps> = ({value}) => {\n  const Container = styled.div`\n    ;\n\n    progress[value] {\n      width: 28rem;\n      margin-left: auto;\n      margin-top: 0.5rem;\n      appearance: none; \n\n\n      ::-webkit-progress-bar {\n        height: 10px;\n        border-radius: 20px;\n        background-color: #eee;\n      }\n\n      ::-webkit-progress-value {\n        height: 10px;\n        border-radius: 20px;\n        background-color: #E76F51;\n      }\n    }\n  `\n\n\n  return (\n    <Container>\n      <progress value={value} max={100} />\n    </Container>\n  );\n};\n\nexport default ProgressBar;","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/UploadStatusBar.tsx",["73","74"],"import React, { useState, useEffect } from 'react'\nimport ProgressBar from './ProgressBar'\nimport deleteButton from '../images/delete.svg'\nimport uploadCompleteIcon from '../images/upload-complete.svg'\nimport { Modal } from 'react-bootstrap'\n\ninterface StatusBarProps {\n  onCloseUploadProgress: () => void\n  onUploadComplete: () => void\n}\n\nconst UploadStatusBar: React.FC<StatusBarProps> = ({onCloseUploadProgress, onUploadComplete}) => {\n  const [progressValue, setProgressValue] = useState(0)\n  const [showProgressBar, setShowProgressBar] = useState(true)\n  \n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setProgressValue((oldValue) => {\n        const newValue = oldValue + 50\n\n        if (newValue === 100) {\n          clearInterval(interval)\n          setShowProgressBar(false)\n          onUploadComplete()\n        }\n        return newValue\n      })\n    }, 1000)\n\n\n  }, [])\n\n  // const showUploading = () => {\n\n  //   if (progressValue >= 100) {\n  //     return (\n  //       <div>Complete</div>\n  //     )\n  //   } else {\n  //     return (\n  //       <div onClick={() => {onCloseUploadProgress()}}>\n  //       <ProgressBar value={progressValue}/>\n  //       </div>\n  //     )\n  //   }\n  // // }\n  // if (progressValue >= 100) {\n  //   setShowProgress(false)\n  // }\n  \n\n  return(\n    <div className='progress-bar-container'>\n    { showProgressBar ? \n      <div>\n        <div className='upload-bar-header'>\n          Uploading\n          <img src={deleteButton} alt='close' className='upload-icon' onClick={() => {onCloseUploadProgress()}}/>\n        </div>\n\n        <ProgressBar value={progressValue}/>\n      </div> \n      : <div className='upload-bar-header'>\n          Complete\n          <img src={uploadCompleteIcon} alt='complete icon' className='upload-icon'/>\n        </div>}\n    </div>\n  )\n}\n\nexport default UploadStatusBar",{"ruleId":"75","severity":1,"message":"76","line":8,"column":8,"nodeType":"77","messageId":"78","endLine":8,"endColumn":20},{"ruleId":"75","severity":1,"message":"79","line":28,"column":10,"nodeType":"77","messageId":"78","endLine":28,"endColumn":22},{"ruleId":"75","severity":1,"message":"80","line":37,"column":9,"nodeType":"77","messageId":"78","endLine":37,"endColumn":21},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"81","replacedBy":"85"},{"ruleId":"83","replacedBy":"86"},{"ruleId":"81","replacedBy":"87"},{"ruleId":"83","replacedBy":"88"},{"ruleId":"75","severity":1,"message":"89","line":1,"column":27,"nodeType":"77","messageId":"78","endLine":1,"endColumn":36},{"ruleId":"75","severity":1,"message":"90","line":2,"column":17,"nodeType":"77","messageId":"78","endLine":2,"endColumn":22},{"ruleId":"75","severity":1,"message":"91","line":1,"column":17,"nodeType":"77","messageId":"78","endLine":1,"endColumn":25},{"ruleId":"75","severity":1,"message":"89","line":1,"column":27,"nodeType":"77","messageId":"78","endLine":1,"endColumn":36},{"ruleId":"75","severity":1,"message":"92","line":5,"column":10,"nodeType":"77","messageId":"78","endLine":5,"endColumn":15},{"ruleId":"93","severity":1,"message":"94","line":32,"column":6,"nodeType":"95","endLine":32,"endColumn":8,"suggestions":"96"},"@typescript-eslint/no-unused-vars","'ColorPalette' is defined but never used.","Identifier","unusedVar","'colorResults' is assigned a value but never used.","'onClickColor' is assigned a value but never used.","no-native-reassign",["97"],"no-negated-in-lhs",["98"],["97"],["98"],["97"],["98"],"'useEffect' is defined but never used.","'Toast' is defined but never used.","'useState' is defined but never used.","'Modal' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onUploadComplete'. Either include it or remove the dependency array. If 'onUploadComplete' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["99"],"no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},"Update the dependencies array to be: [onUploadComplete]",{"range":"102","text":"103"},[895,897],"[onUploadComplete]"]
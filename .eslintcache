[{"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/App.tsx":"1","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/index.tsx":"2","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/reportWebVitals.ts":"3","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/ColorPalette.tsx":"4","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/Color.tsx":"5","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/CompareColors.tsx":"6","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/ColorMatchedSearchResult.tsx":"7","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/SearchBar.tsx":"8","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/SerpWowAPI.tsx":"9","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/UploadModal.tsx":"10","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/ProgressBar.tsx":"11","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/UploadStatusBar.tsx":"12","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/SearchFilterBar.tsx":"13","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/SearchHeader.tsx":"14","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/LandingHeader.tsx":"15","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/Footer.tsx":"16","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/ColorMatchedResults.tsx":"17"},{"size":12974,"mtime":1613546647889,"results":"18","hashOfConfig":"19"},{"size":573,"mtime":1612980830511,"results":"20","hashOfConfig":"19"},{"size":425,"mtime":1612297760647,"results":"21","hashOfConfig":"19"},{"size":587,"mtime":1613112628978,"results":"22","hashOfConfig":"19"},{"size":1107,"mtime":1613188543170,"results":"23","hashOfConfig":"19"},{"size":3109,"mtime":1613117402984,"results":"24","hashOfConfig":"19"},{"size":744,"mtime":1613547332557,"results":"25","hashOfConfig":"19"},{"size":1248,"mtime":1613113455245,"results":"26","hashOfConfig":"19"},{"size":1917,"mtime":1613547715329,"results":"27","hashOfConfig":"19"},{"size":3302,"mtime":1613443693195,"results":"28","hashOfConfig":"19"},{"size":722,"mtime":1612851923730,"results":"29","hashOfConfig":"19"},{"size":1567,"mtime":1613528009286,"results":"30","hashOfConfig":"19"},{"size":4944,"mtime":1613545275962,"results":"31","hashOfConfig":"19"},{"size":799,"mtime":1613446671446,"results":"32","hashOfConfig":"19"},{"size":841,"mtime":1613447049621,"results":"33","hashOfConfig":"19"},{"size":1009,"mtime":1613437875007,"results":"34","hashOfConfig":"19"},{"size":606,"mtime":1613535801299,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},"16rde79",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"39"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"39"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/App.tsx",["75"],"import React, { useState, useEffect, useRef } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport './App.css';\nimport UploadModal from './components/UploadModal'\nimport SearchFilterBar from './components/SearchFilterBar'\nimport { ColorProps } from './components/Color'\nimport ColorMatchedSearchResult from './components/ColorMatchedSearchResult';\nimport { SearchResultProps, ColorMatchedProps } from './components/ColorMatchedSearchResult'\nimport { deltaE, getColorName } from './CompareColors'\nimport { fetchSerpWowSearchResults } from './SerpWowAPI'\nimport splashy  from 'splashy'\nimport convert from 'color-convert'\nimport Header from './components/SearchHeader'\nimport LandingHeader from './components/LandingHeader'\nimport Footer from './components/Footer'\n\nimport './components/SearchPageLayout.css'\nimport './components/LandingPage.css'\nimport landing from './images/designer.svg'\nimport step1 from './images/step_1.svg'\nimport step2 from './images/step_2.svg'\nimport plusicon from './images/plus-icon.svg'\nimport MORE from './images/MORE.svg'\n\n\nimport { Circle } from 'styled-spinkit'\nimport ColorMatchedResults from './components/ColorMatchedResults'\n\n\nconst App: React.FC = () => {\n  const [errorMessage, setErrorMessage] = useState< string | null | void >(null)\n  const [selectedColors, setSelectedColors] = useState<ColorProps[]>([])\n  const [colorResults, setColorResults] = useState<ColorProps[]>([])\n  const [searchResults, setSearchResults] = useState<SearchResultProps[]>([])\n  // const [colorMatchedResults, setColorMatchedResults] = useState<SearchResultProps[]>([])\n    // const [colorMatchedResults, setColorMatchedResults] = useState<ColorMatchedProps>({})\n  const [colorMatchedResults, setColorMatchedResults] = useState<ColorMatchedProps>({'1':[],'2':[],'3':[],'4':[],'5':[],'6':[]})\n  const [selectedColorMatchedResults, setSelectedColorMatchedResults] = useState<SearchResultProps[]>([])\n  const [uploadModalShow, setUploadModalShow] = useState(false);\n  const [searchLoading, setSearchLoading] = useState(false)\n  const [referenceImage, setReferenceImage] = useState<string>('')\n  const [searchQuery, setSearchQuery] = useState<string>('')\n\n  const resultsPerPage = 9\n  const [next, setNext] = useState(resultsPerPage)\n\n\n  // Select/Deselect color from color palette\n  const onClickColor = (clickedColor: ColorProps) => {\n    let newSelectedColors: ColorProps[] = []\n\n    if(clickedColor.selected){\n      newSelectedColors = [...selectedColors]\n      newSelectedColors.push(clickedColor)\n    } else {\n      selectedColors.forEach( pastSelectedColor => {\n        if(clickedColor.id !== pastSelectedColor.id){\n          newSelectedColors.push(pastSelectedColor)\n        }\n      })\n    }\n\n    setSelectedColors(newSelectedColors)\n  }\n\n\n  // After uploading image, call API to determine dominant colors in image\n  const onImageSubmit = (imgUrl: string) => {    \n    setReferenceImage(imgUrl) \n    setColorResults([])\n    setSelectedColors([])\n\n    resetSearch()\n\n    splashy(imgUrl)\n      .then( response => {\n        const colorArray = response.map( color => {\n          return convert.hex.rgb(color)\n        })\n\n        if(colorArray.length > 0) {\n          const colorObjects: ColorProps[] = []\n          let i = 1\n\n          for( let color of colorArray ){\n            colorObjects.push({\n              color: color,\n              id: i,\n              name: getColorName(color)\n            })\n\n            i += 1\n          }\n\n          setColorResults(colorObjects)\n          setSelectedColors(colorObjects)\n          // setSearchLoading(true)\n          setSearchQuery('home furniture')\n\n\n        } else {\n          setErrorMessage(\"Could not read image\")\n\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 6000)\n        }\n      })\n  }\n\n  const resetSearch = () => {\n    setSearchResults([])\n    setColorMatchedResults({'1':[],'2':[],'3':[],'4':[],'5':[],'6':[]})\n    setSelectedColorMatchedResults([])\n    setNext(resultsPerPage)\n    setSearchLoading(true)\n  }\n\n  useEffect(()=> {\n    let searchIsMounted = true\n\n    const onSearchSubmit = async (newSearchQuery: string) => {\n      if(!referenceImage){\n        setErrorMessage('Upload image to start search')\n\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 6000)\n\n      } else if (selectedColors.length === 0){\n        setErrorMessage('Select colors to search')\n\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 6000)\n      } else {\n        let colorNameSet: any = new Set()\n        for( const color of selectedColors) {\n          colorNameSet.add(color.name)\n        }\n\n        console.log(\"~~~~~~~COLOR SET\", colorNameSet)\n        let newSearchResults = [...searchResults]\n\n        for(let colorName of colorNameSet) {\n\n          console.log('LOOKING FOR COLOR', colorName, 'before FETCH')\n          await fetchSerpWowSearchResults(newSearchQuery, colorName)\n          // eslint-disable-next-line no-loop-func\n          .then( response => {\n            // if response is an array of search results, set searchResults\n            if( typeof response === 'object') {\n\n              if (searchIsMounted) {\n                newSearchResults = newSearchResults.concat(response)\n\n                console.log('I GOT SEARCH RESULTS!')\n  \n                setSearchResults(newSearchResults)\n              }\n            // if response is an error string, set error message\n            } else if(typeof response === 'string'){\n              setErrorMessage(response)\n\n              setTimeout(() => {\n                setErrorMessage(null)\n              }, 6000)\n\n              console.log('NO SEARCH RESULTS! I GOT AN ERROR')\n\n            }\n          })\n        }\n      }\n    }\n\n    // if (searchIsMounted) {\n      onSearchSubmit(searchQuery)\n    // }\n\n    return () => {\n      searchIsMounted = false\n    }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchQuery])\n\n  const initialRender = useRef(true)\n  useEffect(() => {\n    let colorComparisonIsMounted = true\n\n    if (initialRender.current) {\n      initialRender.current = false\n    } else {\n      if(searchResults.length > 0  && selectedColors.length > 0 ) {\n        const filterSearchByColor = async (selectedColors: ColorProps[], searchResults: SearchResultProps[]) => {\n          const newColorMatches: ColorMatchedProps = {...colorMatchedResults}\n        \n          console.log('IN FILTER SEARCH BY COLOR')\n          \n          for( const searchResult of searchResults) {\n\n            // await prominent(searchResult.imageUrl, { amount: 3, group: 30, sample: 1 })\n            await splashy(searchResult.imageUrl)\n              .then( response => {\n\n                const colorArraySearchResults = response.map( color => {\n                  return convert.hex.rgb(color)\n                })\n    \n                // response is a nested array of rgb values [[r,g,b],...]\n                // let colorArraySearchResults = response as Array<number[]>\n                \n                if( typeof colorArraySearchResults === 'object') {\n                  colorComparisonLoop:\n                  for(let searchResultRGB of colorArraySearchResults) {\n                    for(let selectColor of selectedColors) {\n                      const colorDiff = deltaE(searchResultRGB, selectColor.color)\n              \n                      if(colorDiff < 5 && !newColorMatches[`${selectColor.id}`].includes(searchResult)){\n                        newColorMatches[`${selectColor.id}`].push(searchResult)\n                        break colorComparisonLoop\n                      }\n                    }\n                  }\n                }\n              })\n            }\n          setColorMatchedResults(newColorMatches)\n        }\n\n        if (colorComparisonIsMounted) {\n          filterSearchByColor(selectedColors, searchResults)\n        }\n    \n        return () => {\n          colorComparisonIsMounted = false\n        }    \n      }\n    }\n    \n    \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchResults])\n\n  \n  useEffect(() => {\n    if (initialRender.current) {\n      initialRender.current = false\n    } else if ( selectedColors.length < 6 ) {\n      let selectedMatchedResults: SearchResultProps[] = []\n\n      for(const color of selectedColors) {\n        selectedMatchedResults = selectedMatchedResults.concat(colorMatchedResults[color.id])\n      }\n\n      setSelectedColorMatchedResults(selectedMatchedResults)\n    } else {\n      if ( colorMatchedResults !== {'1':[],'2':[],'3':[],'4':[],'5':[],'6':[]} ) {\n      \n        const newMatchedResults = [...selectedColorMatchedResults]\n\n        for(const colorKey in colorMatchedResults) {\n          const resultArray = colorMatchedResults[colorKey]\n          for( const result of resultArray ){\n            if(!newMatchedResults.includes(result)) {\n              newMatchedResults.push(result)\n            }\n          }\n        }\n\n        setSelectedColorMatchedResults(newMatchedResults)\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedColors, colorMatchedResults])\n\n\n  const resultsToShow = selectedColorMatchedResults.slice(0, next)\n\n  return (\n    <Router>\n      <div className='App'>\n\n      <UploadModal \n        show={uploadModalShow} onHide={() => setUploadModalShow(false)} \n        onImageSubmitCallback={onImageSubmit} \n        colors={colorResults} \n        onClickColorCallback={onClickColor} \n      />\n\n      <Switch>\n        <Route exact path='/search'>\n          <div className='search-page'>\n            <div className='search-header'>\n              <Header setUploadModalShow={setUploadModalShow}/>\n            </div>\n\n          <div className='search-main'>\n            <div className='search-content'>\n              { errorMessage ? <div className='error-message'>{errorMessage}</div> : <div className='error-message'></div> }\n\n              <SearchFilterBar \n                colors={colorResults}\n                // selectedColors={selectedColors}\n                onClickColorCallback={onClickColor}\n                image={referenceImage} \n                setSearchQuery={setSearchQuery}\n                resetSearch={resetSearch}\n              />\n\n              <div className='search-results-container'> \n                { searchLoading && (selectedColorMatchedResults.length === 0) ? \n                  < Circle color={'#2A9D8F'}/> \n                  :\n                  <ColorMatchedResults resultsToRender={selectedColorMatchedResults.slice(0, next)}/>\n                }\n\n                { selectedColorMatchedResults.length > resultsToShow.length ? \n                  <div onClick={() => {setNext(next+resultsPerPage)}} className='load-more-button'><img src={MORE} alt='more results'className='more'/><span><img src={plusicon} alt='more results' className='plus-icon'/></span></div> : null }\n              </div>\n            </div>\n\n            <Footer />\n          </div>\n\n          </div>\n        </Route>\n\n        <Route path='/'>\n          <div className='landing-page'>\n            <LandingHeader setUploadModalShow={setUploadModalShow}/>\n\n            <div className='landing-main'>\n\n              <div className='landing-content'>\n                <img src={landing} alt='hero' className='landing-background'></img>\n\n                \n                <div className='landing-1'>\n                  <h1>A new way to find your dream furniture</h1>\n                  <p>Find furniture that fits your aesthetic. \n                    Furnie is here to modernize traditional furniture shopping. \n                    Quick, simple, and customized to your personal taste.</p>\n\n                  <button className='upload-button'onClick={() => setUploadModalShow(true)}>\n                    Upload a photo\n                  </button>\n                </div>\n\n                <img src={step1} alt='step 1' className='step1-image'></img>\n\n                <div className='landing-2'>\n                  <h2>Upload Your Inspiration Photo</h2>\n                  <p>All you have to do is select and upload your furniture inspiration photo, and we will do the rest. \n                    This can be done on either your phone and computer. \n                    It’s that simple and convenient!</p>\n                </div>\n\n                <img src={step2} alt='step 2' className='step2-image'></img>\n\n                <div className='landing-3'>\n\n                  <h2>Get Matched and Find Your Dream Furniture</h2>\n                  <p>The top five colors in your inspiration photo will be used to find visually similar furniture for sale.</p> \n                  <p>You can use filters to narrow down your search results.</p>\n                </div>\n              </div>\n\n              <Footer />\n            </div>\n\n\n\n          </div>\n\n\n\n        </Route>\n\n        <Route render={\n          () => <h1>Not Found</h1>\n        }/>\n\n\n\n      </Switch>\n\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n",["76","77"],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/index.tsx",[],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/reportWebVitals.ts",[],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/ColorPalette.tsx",[],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/Color.tsx",[],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/CompareColors.tsx",[],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/ColorMatchedSearchResult.tsx",[],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/SearchBar.tsx",[],["78","79"],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/SerpWowAPI.tsx",[],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/UploadModal.tsx",[],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/ProgressBar.tsx",["80","81"],"import React, { useState, useEffect } from \"react\";\nimport styled from 'styled-components'\n\ninterface ProgressBarProps {\n  value: number\n}\n\nconst ProgressBar: React.FC<ProgressBarProps> = ({value}) => {\n  const Container = styled.div`\n    ;\n\n    progress[value] {\n      width: 28rem;\n      margin-left: auto;\n      margin-top: 0.5rem;\n      appearance: none; \n\n\n      ::-webkit-progress-bar {\n        height: 10px;\n        border-radius: 20px;\n        background-color: #eee;\n      }\n\n      ::-webkit-progress-value {\n        height: 10px;\n        border-radius: 20px;\n        background-color: #E76F51;\n      }\n    }\n  `\n\n\n  return (\n    <Container>\n      <progress value={value} max={100} />\n    </Container>\n  );\n};\n\nexport default ProgressBar;","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/UploadStatusBar.tsx",[],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/SearchFilterBar.tsx",["82"],"import React from 'react'\nimport { ColorProps } from './Color'\nimport ColorPalette from './ColorPalette';\nimport { ColorPaletteProps } from './ColorPalette'\nimport './SearchFilterBar.css'\nimport { Button, Accordion, Card } from 'react-bootstrap'\n\n\ninterface SearchFilterProps extends ColorPaletteProps {\n  image: string,\n  // selectedColors: ColorProps[]\n  // onSearchSubmitCallback?: (searchQuery: string, selectedColors: ColorProps[]) => void\n  setSearchQuery: (arg0: string) => void\n  resetSearch: () => void\n}\n\nconst SearchFilterBar: React.FC<SearchFilterProps> = ({image, colors, onClickColorCallback, setSearchQuery, resetSearch}) => {\n\n  const onSelectCategory = ( searchQuery: string) => {\n    resetSearch()\n\n    setSearchQuery(searchQuery)\n  }\n  return(\n    <div className='search-filter-bar'>\n      <div className='reference-image-container'>\n        { image ? <img src={image} alt='reference' className='reference-image'/> : null }\n      </div>\n      <div className='filter-label'>FILTER BY</div>\n      <div className='filter-label'>Color</div>\n      <ColorPalette colors={colors} onClickColorCallback={onClickColorCallback} />\n\n      <div className='filter-label'>CATEGORIES</div>\n\n      <Accordion className='accordian'>\n        <Card>\n          <Card.Header>\n            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\" className='category'>\n              Bedroom\n            </Accordion.Toggle>\n          </Card.Header>\n          <Accordion.Collapse eventKey=\"0\">\n            <Card.Body className='sub-category'>\n              <div onClick={() => {onSelectCategory('bedframe')}}>Bedframes</div>\n              <div onClick={() => {onSelectCategory('bedding')}}>Bedding</div>\n              <div onClick={() => {onSelectCategory('nightstand')}}>Nightstands</div>\n              <div onClick={() => {onSelectCategory('lamp')}}>Lamps</div>\n              <div onClick={() => {onSelectCategory('dresser')}}>Dressers</div>\n              <div onClick={() => {onSelectCategory('bedroom storage organization')}}>Storage and Organization</div>\n              <div onClick={() => {onSelectCategory('desk')}}>Desks</div>\n              <div onClick={() => {onSelectCategory('rug')}}>Rugs</div>\n            </Card.Body>\n\n          </Accordion.Collapse>\n        </Card>\n\n\n        <Card >\n          <Card.Header>\n            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\" className='category'>\n              Living Room\n            </Accordion.Toggle>\n          </Card.Header>\n          <Accordion.Collapse eventKey=\"1\">\n            <Card.Body className='sub-category'>\n              <div onClick={() => {onSelectCategory('sofa couch')}}>Sofas</div>\n              <div onClick={() => {onSelectCategory('armchair')}}>Armchairs</div>\n              <div onClick={() => {onSelectCategory('throw blanket')}}>Throw Blankets</div>\n              <div onClick={() => {onSelectCategory('coffee table')}}>Coffee Tables</div>\n              <div onClick={() => {onSelectCategory('side table')}}>Side Tables</div>\n              <div onClick={() => {onSelectCategory('bookcase shelving')}}>Shelving Units</div>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n\n        <Card >\n          <Card.Header>\n            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\" className='category'>\n              Kitchen and Dining\n            </Accordion.Toggle>\n          </Card.Header>\n          <Accordion.Collapse eventKey=\"2\">\n            <Card.Body className='sub-category'>\n              <div onClick={() => {onSelectCategory('dining table')}}>Dining Tables</div>\n              <div onClick={() => {onSelectCategory('dining chair')}}>Dining Chairs</div>\n              <div onClick={() => {onSelectCategory('dining set')}}>Dining Sets</div>\n              <div onClick={() => {onSelectCategory('dining stool bench')}}>Stools and Benches</div>\n              <div onClick={() => {onSelectCategory('cookware')}}>Cookware</div>\n              <div onClick={() => {onSelectCategory('tableware')}}>Tableware</div>\n              <div onClick={() => {onSelectCategory('kitchen storage')}}>Storage and Organization</div>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n\n        <Card>\n          <Card.Header>\n            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"3\" className='category'>\n              Bathroom\n            </Accordion.Toggle>\n          </Card.Header>\n          <Accordion.Collapse eventKey=\"3\">\n            <Card.Body className='sub-category'>\n              <div onClick={() => {onSelectCategory('bathroom accessories')}}>Bathroom Accessories</div>\n              <div onClick={() => {onSelectCategory('towel')}}>Towels</div>\n              <div onClick={() => {onSelectCategory('bathroom storage')}}>Storage and Organization</div>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n\n\n    </div>\n\n\n\n  )\n}\n\nexport default SearchFilterBar","/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/SearchHeader.tsx",[],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/LandingHeader.tsx",[],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/Footer.tsx",[],"/Users/Xtina/Documents/Ada/exercises/ada-capstone/src/components/ColorMatchedResults.tsx",[],{"ruleId":"83","severity":1,"message":"84","line":12,"column":8,"nodeType":"85","messageId":"86","endLine":12,"endColumn":32},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"87","replacedBy":"91"},{"ruleId":"89","replacedBy":"92"},{"ruleId":"83","severity":1,"message":"93","line":1,"column":17,"nodeType":"85","messageId":"86","endLine":1,"endColumn":25},{"ruleId":"83","severity":1,"message":"94","line":1,"column":27,"nodeType":"85","messageId":"86","endLine":1,"endColumn":36},{"ruleId":"83","severity":1,"message":"95","line":2,"column":10,"nodeType":"85","messageId":"86","endLine":2,"endColumn":20},"@typescript-eslint/no-unused-vars","'ColorMatchedSearchResult' is defined but never used.","Identifier","unusedVar","no-native-reassign",["96"],"no-negated-in-lhs",["97"],["96"],["97"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'ColorProps' is defined but never used.","no-global-assign","no-unsafe-negation"]